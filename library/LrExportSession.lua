---@meta

---@class LrExportSession
---@field catalog LrCatalog The catalog object for this export session.
local LrExportSession = {}

--- Reports the number of renditions that will be generated by this session.
---@return number # The number of renditions.
function LrExportSession:countRenditions() end

--- Creates all of the renditions specified by this export session.
function LrExportSession:doExportOnCurrentTask() end

--- Starts rendering photos in a new asynchronous task.
function LrExportSession:doExportOnNewTask() end

--- Creates an iterator with which to walk the list of photos to be exported.
function LrExportSession:photosToExport() end

--- Records the unique identifier assigned to a published collection.
---@param remoteId (string | number) The unique ID for the collection, assigned by the service
function LrExportSession:recordRemoteCollectionId(remoteId) end

--- Records the URL assigned to a published collection.
---@param remoteUrl (string | number) The URL of the collection, assigned by the service
function LrExportSession:recordRemoteCollectionUrl(remoteUrl) end

--- Removes all renditions for a photo from the export session.
---@param photo LrPhoto The photo to remove.
function LrExportSession:removePhoto(photo) end

--- Creates an iterator with which to walk the list of renditions generated for this session's photos.
---@param params table? Arguments in named argument syntax; all arguments are optional. exportContext (LrExportContext): An export context. progressScope (LrProgressScope): A progress scope. renderProgressPortion (number): Percentage completion for progress scope when done, [0..1]. stopIfCanceled (Boolean): True to stop the iterator prematurely if progress scope is canceled. The flag is ignored if progressScope is not supplied.
function LrExportSession:renditions(params) end

--- Creates an iterator with which to walk an export filter's renditions-to-satisfy list.
---@param params table? Arguments in named argument syntax. plugin (_PLUGIN object) renditionsToSatisfy (array of LrExportRendition): The list of renditions that this filter must satisfy. filterSettings (function, optional): If present, this function can alter the export settings of the rendition. It is called with two arguments: the individual rendition to be satisfied, and a copy of its export settings that can be modified in place. It can optionally return a string, which will be used as the new path to the file.
function LrExportSession:renditionsForFilter(params) end

--- Reports the type of this object.
---@return string # 'LrExportSession'.
function LrExportSession:type() end

--- Creates an export session object.
---@param params table Arguments in named-argument syntax. All are required. photosToExport (array of LrPhoto) A set of photos to be exported in this session. exportSettings (table) A set of export settings for this session, as generated by the Export dialog.
---@return any
local function LrExportSessionConstructor(params) end

return LrExportSessionConstructor
